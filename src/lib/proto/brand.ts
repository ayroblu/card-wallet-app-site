// @generated by protobuf-ts 2.11.1
// @generated from protobuf file "brand.proto" (package "card_wallet_app.brands", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message card_wallet_app.brands.Brand
 */
export interface Brand {
    /**
     * @generated from protobuf field: string id = 1
     */
    id: string;
    /**
     * @generated from protobuf field: string name = 2
     */
    name: string;
    /**
     * @generated from protobuf field: repeated string countries = 3
     */
    countries: string[];
    /**
     * @generated from protobuf field: repeated string search_terms = 4
     */
    searchTerms: string[];
    /**
     * @generated from protobuf field: int32 last_modified = 5
     */
    lastModified: number;
    /**
     * @generated from protobuf field: optional string url = 6
     */
    url?: string;
}
/**
 * @generated from protobuf message card_wallet_app.brands.Brands
 */
export interface Brands {
    /**
     * @generated from protobuf field: repeated card_wallet_app.brands.Brand brands = 1
     */
    brands: Brand[];
}
// @generated message type with reflection information, may provide speed optimized methods
class Brand$Type extends MessageType<Brand> {
    constructor() {
        super("card_wallet_app.brands.Brand", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "countries", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "search_terms", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "last_modified", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "url", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Brand>): Brand {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.name = "";
        message.countries = [];
        message.searchTerms = [];
        message.lastModified = 0;
        if (value !== undefined)
            reflectionMergePartial<Brand>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Brand): Brand {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string name */ 2:
                    message.name = reader.string();
                    break;
                case /* repeated string countries */ 3:
                    message.countries.push(reader.string());
                    break;
                case /* repeated string search_terms */ 4:
                    message.searchTerms.push(reader.string());
                    break;
                case /* int32 last_modified */ 5:
                    message.lastModified = reader.int32();
                    break;
                case /* optional string url */ 6:
                    message.url = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Brand, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string name = 2; */
        if (message.name !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.name);
        /* repeated string countries = 3; */
        for (let i = 0; i < message.countries.length; i++)
            writer.tag(3, WireType.LengthDelimited).string(message.countries[i]);
        /* repeated string search_terms = 4; */
        for (let i = 0; i < message.searchTerms.length; i++)
            writer.tag(4, WireType.LengthDelimited).string(message.searchTerms[i]);
        /* int32 last_modified = 5; */
        if (message.lastModified !== 0)
            writer.tag(5, WireType.Varint).int32(message.lastModified);
        /* optional string url = 6; */
        if (message.url !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.url);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message card_wallet_app.brands.Brand
 */
export const Brand = new Brand$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Brands$Type extends MessageType<Brands> {
    constructor() {
        super("card_wallet_app.brands.Brands", [
            { no: 1, name: "brands", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Brand }
        ]);
    }
    create(value?: PartialMessage<Brands>): Brands {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.brands = [];
        if (value !== undefined)
            reflectionMergePartial<Brands>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Brands): Brands {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated card_wallet_app.brands.Brand brands */ 1:
                    message.brands.push(Brand.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Brands, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated card_wallet_app.brands.Brand brands = 1; */
        for (let i = 0; i < message.brands.length; i++)
            Brand.internalBinaryWrite(message.brands[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message card_wallet_app.brands.Brands
 */
export const Brands = new Brands$Type();
